<!DOCTYPE etl SYSTEM "http://scriptella.javaforge.com/dtd/etl.dtd">
<etl>
    <connection id="java" driver="janino" />

    <query connection-id="java">
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.FileOutputStream;
        import java.io.FileNotFoundException;
        import java.io.IOException;
        import java.util.List;
        import java.util.Map;
        import java.util.HashMap;

        import com.github.jknack.handlebars.Handlebars;
        import com.github.jknack.handlebars.Template;
        import com.github.jknack.handlebars.Context;
        import com.github.jknack.handlebars.Context.Builder;
        import com.github.jknack.handlebars.ValueResolver;
        import com.github.jknack.handlebars.context.MapValueResolver;
        import com.github.jknack.handlebars.context.FieldValueResolver;
        import com.github.jknack.handlebars.context.JavaBeanValueResolver;
        import com.github.jknack.handlebars.io.TemplateLoader;
        import com.github.jknack.handlebars.io.FileTemplateLoader;
        import org.apache.commons.io.IOUtils;
        import com.fasterxml.jackson.databind.ObjectMapper;

        File buildDir = new File((String)get("BASE_DIR"));

        TemplateLoader loader = new FileTemplateLoader(buildDir.getAbsolutePath(), (String)get("SUFFIX"));
        Handlebars handlebars = new Handlebars(loader);
        FileInputStream input = null;

        try {
            Template template = handlebars.compile((String)get("SOURCE"));
            ObjectMapper mapper = new ObjectMapper();
            Object data = null;
            String json = null;

            File inputDataFile = new File((String)get("MODEL"));
            input = new FileInputStream(inputDataFile);
            json = IOUtils.toString(input);

            if (json.trim().startsWith("[")) {
                data = mapper.readValue(json, List.class);
            }

            data = mapper.readValue(json, Map.class);
            FileOutputStream output = new FileOutputStream(buildDir.getAbsolutePath() + File.separator + (String)get("OUTPUT"));

            String outputBody = template.apply(data);
            String publicDirReplacement = "optimum/";
            String publicContext = (String)get("PUBLIC_CONTEXT");

           if (publicContext != null) {
                if (!publicContext.isEmpty()) {
                    publicContext += "/";
                }
           }

            outputBody = outputBody.replaceAll(publicDirReplacement, publicContext + publicDirReplacement);

            IOUtils.write(outputBody, output);
        } catch (IOException e) {
            System.out.println(e.getMessage());
        } finally {
            IOUtils.closeQuietly(input);
        }
    </query>
</etl>
